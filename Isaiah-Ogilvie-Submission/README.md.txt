Disclaimer: I have not coded since taking the Computer Programming course about 2 years ago, so I had to do a lot of refreshing of Python material to be able to put this together.

I chose primality testing since the goal of the algorithm is simple enough: is a given number as the input a prime number or not? I started with reviewing the definition of an algorithm and the qualities needed, which I will list paired with my thought process:

1. Input: the user of the algorithm will input a number that is not a negative number or 0 and is greater than 1, since neither 0 nor 1 are prime numbers.

2. Output: In the opening planning phase, I decided upon two outputs: "This number is prime" and "This number is complex." After more deliberation, I added "This number is not prime" to handle inputs of 0 or 1, then simplified all outputs to state the given input, then what the input is.

3. Definiteness: The steps of the algorithm as originally listed included over 6 steps including the input of a positive integer greater than 1, defining a prime number/complex number, defining the input, and returning the three aforementioned outputs.

4. Correctness: Defining the input was the hardest part until I completed the review on coding functions in Python, as well as relearning that a variable can be called as an integer with a string definition. Reviewing the definition of a prime number helped me set the range that the function would use to determine the prime number's definition, and learning that square root could be represented as ** also helped.

5. Finiteness: Following the research completed in steps 3 and 4 allowed the shortening of the algorithm's steps to 3: Define the function for determining a prime number, input a positive integer, and return the input defined as prime, complex, or not a prime.

6. Effectiveness: The algorithm works with little to no latency, since it has only 3 steps.

7. Generality: The algorithm works for all integers.

I ran the code using a Python code tester at https://www.online-python.com/.

- The first step is a function that defines a prime number through comparing any numerical input (n) to integers 1 and below. If input n is a match for this condition, the result is printed as the n is not prime. Following a false result, the function's instances activate, where the input is divided by a range of numbers starting with 2 and ending with the square root of the integer. If the quotient leaves no remainder, or if n divides i, the result is printed as n is a complex number. In all other cases, n is printed as a prime number.

- The second step is a numerical input from the user, which is defined via a variable called number.

- The third step prints the message generated by the function via the user's input.